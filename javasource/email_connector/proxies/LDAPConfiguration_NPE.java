// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package email_connector.proxies;

public class LDAPConfiguration_NPE implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject lDAPConfiguration_NPEMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Email_Connector.LDAPConfiguration_NPE";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		LDAPPassword("LDAPPassword"),
		LDAPConfiguration_NPE_LDAPConfiguration("Email_Connector.LDAPConfiguration_NPE_LDAPConfiguration");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LDAPConfiguration_NPE(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected LDAPConfiguration_NPE(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject lDAPConfiguration_NPEMendixObject)
	{
		if (lDAPConfiguration_NPEMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, lDAPConfiguration_NPEMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.lDAPConfiguration_NPEMendixObject = lDAPConfiguration_NPEMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static email_connector.proxies.LDAPConfiguration_NPE initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new email_connector.proxies.LDAPConfiguration_NPE(context, mendixObject);
	}

	public static email_connector.proxies.LDAPConfiguration_NPE load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return email_connector.proxies.LDAPConfiguration_NPE.initialize(context, mendixObject);
	}

	/**
	 * @return value of LDAPPassword
	 */
	public final java.lang.String getLDAPPassword()
	{
		return getLDAPPassword(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPPassword
	 */
	public final java.lang.String getLDAPPassword(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.LDAPPassword.toString());
	}

	/**
	 * Set value of LDAPPassword
	 * @param ldappassword
	 */
	public final void setLDAPPassword(java.lang.String ldappassword)
	{
		setLDAPPassword(getContext(), ldappassword);
	}

	/**
	 * Set value of LDAPPassword
	 * @param context
	 * @param ldappassword
	 */
	public final void setLDAPPassword(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String ldappassword)
	{
		getMendixObject().setValue(context, MemberNames.LDAPPassword.toString(), ldappassword);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of LDAPConfiguration_NPE_LDAPConfiguration
	 */
	public final email_connector.proxies.LDAPConfiguration getLDAPConfiguration_NPE_LDAPConfiguration() throws com.mendix.core.CoreException
	{
		return getLDAPConfiguration_NPE_LDAPConfiguration(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPConfiguration_NPE_LDAPConfiguration
	 * @throws com.mendix.core.CoreException
	 */
	public final email_connector.proxies.LDAPConfiguration getLDAPConfiguration_NPE_LDAPConfiguration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		email_connector.proxies.LDAPConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LDAPConfiguration_NPE_LDAPConfiguration.toString());
		if (identifier != null) {
			result = email_connector.proxies.LDAPConfiguration.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of LDAPConfiguration_NPE_LDAPConfiguration
	 * @param ldapconfiguration_npe_ldapconfiguration
	 */
	public final void setLDAPConfiguration_NPE_LDAPConfiguration(email_connector.proxies.LDAPConfiguration ldapconfiguration_npe_ldapconfiguration)
	{
		setLDAPConfiguration_NPE_LDAPConfiguration(getContext(), ldapconfiguration_npe_ldapconfiguration);
	}

	/**
	 * Set value of LDAPConfiguration_NPE_LDAPConfiguration
	 * @param context
	 * @param ldapconfiguration_npe_ldapconfiguration
	 */
	public final void setLDAPConfiguration_NPE_LDAPConfiguration(com.mendix.systemwideinterfaces.core.IContext context, email_connector.proxies.LDAPConfiguration ldapconfiguration_npe_ldapconfiguration)
	{
		if (ldapconfiguration_npe_ldapconfiguration == null) {
			getMendixObject().setValue(context, MemberNames.LDAPConfiguration_NPE_LDAPConfiguration.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.LDAPConfiguration_NPE_LDAPConfiguration.toString(), ldapconfiguration_npe_ldapconfiguration.getMendixObject().getId());
		}
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return lDAPConfiguration_NPEMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final email_connector.proxies.LDAPConfiguration_NPE that = (email_connector.proxies.LDAPConfiguration_NPE) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
